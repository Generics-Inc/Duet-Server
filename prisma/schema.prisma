generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String?
  role     Role?   @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  profile  Profile?

  @@unique([id, username])
  @@map("Users")
}

model Session {
  id      Int     @id @default(autoincrement())
  userId  Int
  current Boolean @default(false)

  deviceUUID String
  deviceName String
  deviceOS   String

  accessToken  String?
  refreshToken String?

  createdAt      DateTime @default(now())
  lastActivityAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Sessions")
}

model Profile {
  id        Int    @id @default(autoincrement())
  userId    Int    @unique
  username  String @unique
  firstName String
  lastName  String
  birthday  String
  gender    Gender @default(NOT_SPECIFIED)

  groupId Int?
  vkId    Int?
  status  String?
  photo   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupsArchives GroupArchive[]
  groupsRequests GroupRequest[]
  user           User           @relation(fields: [userId, username], references: [id, username], onDelete: Cascade)
  mainGroup      Group?         @relation("mainProfile")
  secondGroup    Group?         @relation("secondProfile")

  @@unique([userId, username])
  @@map("Profiles")
}

model Group {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  mainProfileId   Int?    @unique
  secondProfileId Int?    @unique
  photo           String?
  inviteCode      String? @unique

  relationStartedAt DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  groupArchives GroupArchive[]
  groupRequests GroupRequest[]
  mainProfile   Profile?       @relation("mainProfile", fields: [mainProfileId], references: [id], onDelete: SetNull)
  secondProfile Profile?       @relation("secondProfile", fields: [secondProfileId], references: [id], onDelete: SetNull)

  @@map("Groups")
}

model GroupRequest {
  id         Int    @id @default(autoincrement())
  profileId  Int
  groupId    Int
  inviteCode String

  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("GroupsRequests")
}

model GroupArchive {
  id        Int @id @default(autoincrement())
  groupId   Int
  profileId Int

  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("GroupsArchives")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOT_SPECIFIED
}

model SuperSecret {
  id      Int    @id @default(autoincrement())
  content String
}
