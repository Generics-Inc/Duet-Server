generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String?
  role     Role?   @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  profile  Profile?

  @@unique([id, username])
}

model Session {
  id     Int @id @default(autoincrement())
  userId Int

  deviceUUID String
  deviceName String
  deviceOS   String

  accessToken  String?
  refreshToken String?

  createdAt      DateTime @default(now())
  lastActivityAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id        Int    @id @default(autoincrement())
  userId    Int    @unique
  username  String @unique
  firstName String
  lastName  String
  birthday  String

  groupId Int?
  vkId    Int?
  gender  Gender?
  status  String?
  photo   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                    User                    @relation(fields: [userId, username], references: [id, username], onDelete: Cascade)
  groupsArchives          GroupArchive[]
  groupsRequestsToConnect GroupRequestToConnect[]
  mainGroup               Group?                  @relation("mainProfile")
  secondGroup             Group?                  @relation("secondProfile")

  @@unique([userId, username])
}

model Group {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  mainProfileId   Int?    @unique
  secondProfileId Int?    @unique
  photo           String?
  inviteCode      String? @unique

  relationStartedAt DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  groupArchives          GroupArchive[]
  groupRequestsToConnect GroupRequestToConnect[]
  mainProfile            Profile?                @relation("mainProfile", fields: [mainProfileId], references: [id])
  secondProfile          Profile?                @relation("secondProfile", fields: [secondProfileId], references: [id])
}

model GroupRequestToConnect {
  id        Int @id @default(autoincrement())
  profileId Int
  groupId   Int

  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id])
  group   Group   @relation(fields: [groupId], references: [id])
}

model GroupArchive {
  id        Int @id @default(autoincrement())
  groupId   Int
  profileId Int

  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Content {
  id   Int    @id @default(autoincrement())
  name String

  episodesVieved Int? @default(1)
  vieved         Int? @default(1)

  categories Category[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  color String

  contentId Int?

  Content Content? @relation(fields: [contentId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

model SuperSecret {
  id      Int    @id @default(autoincrement())
  content String
}
