generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique

  role     Role?   @default(USER)
  password String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions         Session[]
  connectedAccount ConnectedAccount[]
  profile          Profile?

  @@unique([id, username])
  @@map("Users")
}

model ConnectedAccount {
  id     Int         @id @default(autoincrement())
  userId Int
  UUID   String
  type   AccountType

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions Session[]

  @@unique([userId, type])
  @@map("ConnectedAccounts")
}

model Session {
  id         Int    @id @default(autoincrement())
  userId     Int
  accountId  Int
  ip         String
  deviceUUID String
  deviceName String
  deviceOS   String

  current      Boolean @default(false)
  accessToken  String?
  refreshToken String?

  createdAt      DateTime @default(now())
  lastActivityAt DateTime @default(now())

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  account ConnectedAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceUUID])
  @@map("Sessions")
}

model Profile {
  id        Int    @unique
  username  String @unique
  firstName String
  lastName  String
  birthday  String
  gender    Gender @default(NOT_SPECIFIED)

  description String?
  photo       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupsArchives GroupArchive[]
  groupsRequests GroupRequest[]
  moviesTags     MovieTag[]
  movies         Movie[]
  user           User           @relation(fields: [id, username], references: [id, username], onDelete: Cascade)
  mainGroup      Group?         @relation("mainProfile")
  secondGroup    Group?         @relation("secondProfile")

  @@unique([id, username])
  @@map("Profiles")
}

model Group {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  mainProfileId   Int?    @unique
  secondProfileId Int?    @unique
  inviteCode      String? @unique
  photo           String?

  relationStartedAt DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  groupArchives GroupArchive[]
  groupRequests GroupRequest[]
  movies        Movie[]
  moviesTags    MovieTag[]
  mainProfile   Profile?       @relation("mainProfile", fields: [mainProfileId], references: [id], onDelete: SetNull)
  secondProfile Profile?       @relation("secondProfile", fields: [secondProfileId], references: [id], onDelete: SetNull)

  @@map("Groups")
}

model GroupRequest {
  id         Int    @id @default(autoincrement())
  profileId  Int
  groupId    Int
  inviteCode String

  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([profileId, groupId])
  @@map("GroupsRequests")
}

model GroupArchive {
  id        Int @id @default(autoincrement())
  groupId   Int
  profileId Int

  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, profileId])
  @@map("GroupsArchives")
}

model Movie {
  id      Int       @id @default(autoincrement())
  groupId Int
  name    String
  type    MovieType

  rating      Int     @default(0)
  isWatched   Boolean @default(false)
  photo       String? @default("loading")
  profileId   Int?
  description String?

  createdAt DateTime @default(now())

  seasons MovieSeason[]
  tags    MovieTag[]    @relation("movieTags")
  group   Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  profile Profile?      @relation(fields: [profileId], references: [id], onDelete: SetNull)

  @@map("Movies")
}

model MovieSeason {
  id        Int     @id @default(autoincrement())
  movieId   Int
  isWatched Boolean @default(false)

  name String?

  series MovieSeria[]
  movie  Movie        @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@map("MoviesSeasons")
}

model MovieSeria {
  id        Int     @id @default(autoincrement())
  seasonId  Int
  isWatched Boolean @default(false)

  name String?

  season MovieSeason @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  @@map("MoviesSeries")
}

model MovieTag {
  id      Int    @id @default(autoincrement())
  groupId Int
  name    String
  color   String

  profileId Int?

  createdAt DateTime @default(now())

  movies  Movie[]  @relation("movieTags")
  group   Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  profile Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull)

  @@unique([groupId, name])
  @@map("MoviesTags")
}

model Photo {
  id    Int    @id @default(autoincrement())
  useId Int
  url   String
}

model SuperSecret {
  id      Int    @id @default(autoincrement())
  content String
}

enum AccountType {
  EMAIL
  VK
  TG
}

enum MovieType {
  FILM
  SERIAL
  ANIME
  CARTOON
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOT_SPECIFIED
}
