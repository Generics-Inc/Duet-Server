generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER

model User {
  id       Int    @id @default(autoincrement())
  username String @unique

  role     Role?   @default(USER)
  password String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions         Session[]
  connectedAccount ConnectedAccount[]
  profile          Profile?

  @@unique([id, username])
  @@map("Users")
}

model ConnectedAccount {
  id     Int         @id @default(autoincrement())
  userId Int
  UUID   String
  type   AccountType

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions Session[]

  @@unique([userId, type])
  @@map("ConnectedAccounts")
}

model Session {
  id         Int    @id @default(autoincrement())
  userId     Int
  accountId  Int
  ip         String
  deviceUUID String
  deviceName String
  deviceOS   String

  current      Boolean @default(false)
  accessToken  String?
  refreshToken String?
  activeSocket String?

  createdAt      DateTime @default(now())
  lastActivityAt DateTime @default(now())

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  account ConnectedAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceUUID])
  @@map("Sessions")
}

model Profile {
  id        Int    @unique
  username  String @unique
  firstName String
  lastName  String
  birthday  String

  gender      Gender  @default(NOT_SPECIFIED)
  description String?
  photo       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupsMoviesRatings   GroupMovieRating[]
  moviesModerates       MovieModerate[]
  anotherGroupsArchives GroupArchive[]     @relation(name: "partner")
  groupsArchives        GroupArchive[]     @relation(name: "profile")
  groupsRequests        GroupRequest[]
  groupsMovies          GroupMovie[]
  movies                Movie[]
  user                  User               @relation(fields: [id, username], references: [id, username], onDelete: Cascade)
  mainGroup             Group?             @relation("mainProfile")
  secondGroup           Group?             @relation("secondProfile")

  @@unique([id, username])
  @@map("Profiles")
}

// END USER

// GROUP

model Group {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  mainProfileId   Int?    @unique
  secondProfileId Int?    @unique
  inviteCode      String? @unique
  photo           String?

  relationStartedAt DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  archives      GroupArchive[]
  requests      GroupRequest[]
  movies        GroupMovie[]
  mainProfile   Profile?       @relation("mainProfile", fields: [mainProfileId], references: [id], onDelete: SetNull)
  secondProfile Profile?       @relation("secondProfile", fields: [secondProfileId], references: [id], onDelete: SetNull)

  @@map("Groups")
}

model GroupRequest {
  id         Int    @id @default(autoincrement())
  profileId  Int
  groupId    Int
  inviteCode String

  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([profileId, groupId])
  @@map("GroupsRequests")
}

model GroupArchive {
  id        Int @id @default(autoincrement())
  groupId   Int
  profileId Int

  partnerId Int?

  createdAt DateTime @default(now())

  profile Profile @relation(name: "profile", fields: [profileId], references: [id], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  partner Profile? @relation(name: "partner", fields: [partnerId], references: [id], onDelete: SetNull)

  @@unique([groupId, profileId])
  @@map("GroupsArchives")
}

model GroupMovie {
  id      Int @id @default(autoincrement())
  groupId Int

  creatorId   Int?
  movieId     Int?
  isWatched   Boolean @default(false)
  moreToWatch Int[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  watchedSeries GroupMovieWatchedSeria[]
  ratings       GroupMovieRating[]
  taskCreate    GroupMovieCreateTask?
  group         Group                    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator       Profile?                 @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  movie         Movie?                   @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@map("GroupsMovies")
}

model GroupMovieWatchedSeria {
  seriaId      Int
  groupMovieId Int

  createdAt DateTime @default(now())

  groupMovie GroupMovie @relation(fields: [groupMovieId], references: [id], onDelete: Cascade)
  seria      MovieSeria @relation(fields: [seriaId], references: [id], onDelete: Cascade)

  @@unique([groupMovieId, seriaId])
  @@map("GroupsMoviesWatchedSeries")
}

model GroupMovieRating {
  id           Int   @id @default(autoincrement())
  profileId    Int
  groupMovieId Int
  scope        Float

  createdAt DateTime @default(now())

  profile    Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  groupMovie GroupMovie @relation(fields: [groupMovieId], references: [id], onDelete: Cascade)

  @@unique([profileId, groupMovieId])
  @@map("GroupsMoviesRatings")
}

model GroupMovieCreateTask {
  id           Int       @id @default(autoincrement())
  groupMovieId Int       @unique
  link         String
  name         String
  addName      String
  type         MovieType

  isError Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupMovie GroupMovie @relation(fields: [groupMovieId], references: [id], onDelete: Cascade)

  @@map("GroupsMoviesCreateTasks")
}

// END GROUP

// MOVIE

model Movie {
  id   Int       @id @default(autoincrement())
  name String
  type MovieType

  partsListId  Int?
  creatorId    Int?
  ageRating    Int?
  time         Int?
  country      String?
  originalName String?
  slogan       String?
  description  String?
  link         String? @unique
  photo        String  @default("not set")
  moderated    Boolean @default(false)

  releaseDate DateTime?
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())

  genres      String[]
  ratings     MovieRating[]
  groupsAdded GroupMovie[]
  seasons     MovieSeason[]
  part        MoviePart?
  moderate    MovieModerate?
  partsList   MoviePartsList? @relation(fields: [partsListId], references: [id], onDelete: SetNull)
  creator     Profile?        @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  @@map("Movies")
}

model MovieModerate {
  id        Int @id @default(autoincrement())
  movieId   Int @unique
  creatorId Int

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  movie   Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model MovieRating {
  id            Int    @id @default(autoincrement())
  movieId       Int
  providerName  String
  countOfScopes Int
  scope         Float

  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, providerName])
  @@map("MoviesRatings")
}

model MoviePart {
  link        String    @unique
  releaseYear Int
  name        String
  type        MovieType

  rating      Float?
  partsListId Int?
  movieId     Int?    @unique
  current     Boolean @default(false)

  movie     Movie?          @relation(fields: [movieId], references: [id], onDelete: SetNull)
  partsList MoviePartsList? @relation(fields: [partsListId], references: [id], onDelete: Cascade)

  @@map("MoviesParts")
}

model MoviePartsList {
  id Int @id @default(autoincrement())

  parts  MoviePart[]
  movies Movie[]

  @@map("MoviesPartsLists")
}

model MovieSeason {
  id          Int       @id @default(autoincrement())
  movieId     Int
  number      Int
  releaseDate DateTime?

  series MovieSeria[]
  movie  Movie        @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@map("MoviesSeasons")
}

model MovieSeria {
  id          Int       @id @default(autoincrement())
  seasonId    Int
  number      Int
  name        String
  releaseDate DateTime?

  groupMovieWatchedSeria GroupMovieWatchedSeria[]
  season                 MovieSeason              @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  @@map("MoviesSeries")
}

// END MOVIE

model HDRezkaMirror {
  url    String              @unique
  status HDRezkaMirrorStatus @default(WORKED)

  createdAt DateTime @default(now())
}

model Photo {
  id    Int    @id @default(autoincrement())
  useId Int
  url   String
}

model SuperSecret {
  id      Int    @id @default(autoincrement())
  content String
}

model EmailSubscribers {
  id    Int    @id @default(autoincrement())
  email String @unique
  code  Int

  isVerify Boolean @default(false)

  createdAt DateTime @default(now())
}

enum AccountType {
  EMAIL
  VK
  TG
}

enum MovieType {
  FILM
  SERIAL
  ANIME
  CARTOON
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOT_SPECIFIED
}

enum HDRezkaMirrorStatus {
  WORKED
  UPDATING
  OLDEN
}
